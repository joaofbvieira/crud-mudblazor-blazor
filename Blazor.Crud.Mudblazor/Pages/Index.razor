@page "/"
@using Blazor.Crud.Mudblazor.Data
@inject Blazor.Crud.Mudblazor.Services.ICustomerService customerService
@inject MudBlazor.ISnackbar snackbar


<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit customers</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="customer.FirstName" Label="First name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="customer.LastName" Label="Last name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="customer.PhoneNumber" Label="Phone number" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save customer</MudButton>
    </MudCardContent>
</MudCard>

<br />

<MudTable Elevation="25" Items="customers" Filter="new Func<Customer, bool>(Search)" @bind-customer="customer">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Customers</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for customers" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>First name</MudTh>
        <MudTh>Last name</MudTh>
        <MudTh>Phone number</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"></MudFab>
            <MudFab @onclick="@(() => Delete(@context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"></MudFab>
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private string searchString = string.Empty;
    private Customer customer = new();
    private List<Customer> customers = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCustomers();
    }

    async Task GetCustomers()
    {
        customers = await customerService.GetCustomers();
    }

    bool Search(Customer customer)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (customer.FirstName.Contains(searchString, StringComparison.InvariantCultureIgnoreCase)
            || customer.LastName.Contains(searchString, StringComparison.InvariantCultureIgnoreCase)
            || customer.PhoneNumber.Contains(searchString, StringComparison.InvariantCultureIgnoreCase))
        {
            return true;
        }

        return false;
    }

    async Task Save()
    {
        await customerService.SaveCustomer(customer);
        customer = new Customer();
        snackbar.Add("Customer saved.", Severity.Success);
        await GetCustomers();
    }

    async Task Edit(int id)
    {
        customer = await customerService.GetCustomerById(id);
    }

    async Task Delete(int id)
    {
        await customerService.DeleteCustomer(id);
        snackbar.Add("Customer deleted.", Severity.Success);
        await GetCustomers();
    }



}